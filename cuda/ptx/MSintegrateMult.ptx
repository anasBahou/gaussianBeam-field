//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-27506705
// Cuda compilation tools, release 10.2, V10.2.89
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	_Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4_
.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd
(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
;
.const .align 4 .b8 uDimProd[12];
.const .align 4 .b8 lDim[16];
.const .align 4 .b8 vDim[16];
.const .align 4 .u32 mixturesNum;
.const .align 16 .b8 randPhase[16];
.const .align 8 .b8 lMixtureAlpha[256];
.const .align 8 .b8 __cudart_i2opi_d[144] = {8, 93, 141, 31, 177, 95, 251, 107, 234, 146, 82, 138, 247, 57, 7, 61, 123, 241, 229, 235, 199, 186, 39, 117, 45, 234, 95, 158, 102, 63, 70, 79, 183, 9, 203, 39, 207, 126, 54, 109, 31, 109, 10, 90, 139, 17, 47, 239, 15, 152, 5, 222, 255, 151, 248, 31, 59, 40, 249, 189, 139, 95, 132, 156, 244, 57, 83, 131, 57, 214, 145, 57, 65, 126, 95, 180, 38, 112, 156, 233, 132, 68, 187, 46, 245, 53, 130, 232, 62, 167, 41, 177, 28, 235, 29, 254, 28, 146, 209, 9, 234, 46, 73, 6, 224, 210, 77, 66, 58, 110, 36, 183, 97, 197, 187, 222, 171, 99, 81, 254, 65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

.visible .entry _Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4_(
	.param .u64 _Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_0,
	.param .u64 _Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_1,
	.param .u64 _Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_2,
	.param .u64 _Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_3,
	.param .u64 _Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_4,
	.param .u64 _Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_5,
	.param .u64 _Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_6,
	.param .u64 _Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_7,
	.param .u64 _Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_8,
	.param .u64 _Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_9
)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<25>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<92>;
	.reg .f64 	%fd<235>;
	.reg .b64 	%rd<51>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd3, [_Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_0];
	ld.param.u64 	%rd4, [_Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_1];
	ld.param.u64 	%rd5, [_Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_2];
	ld.param.u64 	%rd6, [_Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_3];
	ld.param.u64 	%rd7, [_Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_4];
	ld.param.u64 	%rd8, [_Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_5];
	ld.param.u64 	%rd9, [_Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_6];
	ld.param.u64 	%rd10, [_Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_7];
	ld.param.u64 	%rd11, [_Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_8];
	ld.param.u64 	%rd12, [_Z13integrateMultP7double2PKS_S2_S2_S2_S2_PKdS4_S4_S4__param_9];
	mov.u32 	%r12, %ntid.x;
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r1, %r12, %r13, %r14;
	ld.const.u32 	%r15, [uDimProd+8];
	setp.ge.s32	%p1, %r1, %r15;
	@%p1 bra 	BB0_19;

	cvta.to.global.u64 	%rd13, %rd5;
	ld.const.u32 	%r16, [uDimProd+4];
	div.s32 	%r17, %r1, %r16;
	mul.lo.s32 	%r18, %r17, %r16;
	sub.s32 	%r19, %r1, %r18;
	ld.const.u32 	%r20, [uDimProd];
	div.s32 	%r21, %r19, %r20;
	rem.s32 	%r22, %r1, %r20;
	ld.const.u32 	%r23, [lDim+4];
	setp.gt.s32	%p2, %r23, 1;
	selp.b32	%r24, %r22, 0, %p2;
	ld.const.u32 	%r25, [lDim+8];
	setp.gt.s32	%p3, %r25, 1;
	selp.b32	%r26, %r23, 0, %p3;
	mad.lo.s32 	%r27, %r26, %r21, %r24;
	mul.lo.s32 	%r28, %r23, %r25;
	ld.const.u32 	%r29, [lDim+12];
	setp.gt.s32	%p4, %r29, 1;
	selp.b32	%r30, %r28, 0, %p4;
	mad.lo.s32 	%r31, %r30, %r17, %r27;
	ld.const.u32 	%r32, [vDim+4];
	setp.gt.s32	%p5, %r32, 1;
	selp.b32	%r33, %r22, 0, %p5;
	ld.const.u32 	%r34, [vDim+8];
	setp.gt.s32	%p6, %r34, 1;
	selp.b32	%r35, %r32, 0, %p6;
	mad.lo.s32 	%r36, %r35, %r21, %r33;
	mul.lo.s32 	%r37, %r32, %r34;
	ld.const.u32 	%r38, [vDim+12];
	setp.gt.s32	%p7, %r38, 1;
	selp.b32	%r39, %r37, 0, %p7;
	mad.lo.s32 	%r40, %r39, %r17, %r36;
	mul.wide.s32 	%rd14, %r40, 16;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.v2.f64 	{%fd45, %fd46}, [%rd15];
	cvta.to.global.u64 	%rd16, %rd6;
	add.s64 	%rd17, %rd16, %rd14;
	ld.global.v2.f64 	{%fd47, %fd48}, [%rd17];
	cvta.to.global.u64 	%rd18, %rd7;
	add.s64 	%rd19, %rd18, %rd14;
	ld.global.v2.f64 	{%fd49, %fd50}, [%rd19];
	cvta.to.global.u64 	%rd20, %rd8;
	add.s64 	%rd21, %rd20, %rd14;
	ld.global.v2.f64 	{%fd51, %fd52}, [%rd21];
	cvta.to.global.u64 	%rd22, %rd4;
	mul.wide.s32 	%rd23, %r31, 16;
	add.s64 	%rd1, %rd22, %rd23;
	ld.const.u32 	%r2, [mixturesNum];
	setp.lt.s32	%p8, %r2, 1;
	@%p8 bra 	BB0_19;

	ld.global.v2.f64 	{%fd53, %fd54}, [%rd1];
	mov.f64 	%fd55, 0d7FF0000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r3}, %fd55;
	}
	ld.const.v2.f64 	{%fd56, %fd57}, [randPhase];
	mov.u32 	%r90, 0;
	cvta.to.global.u64 	%rd24, %rd9;
	cvta.to.global.u64 	%rd27, %rd10;
	cvta.to.global.u64 	%rd29, %rd11;
	cvta.to.global.u64 	%rd41, %rd12;
	cvta.to.global.u64 	%rd47, %rd3;

BB0_3:
	mov.u32 	%r89, 0;
	mul.wide.s32 	%rd25, %r90, 8;
	add.s64 	%rd26, %rd24, %rd25;
	ld.global.f64 	%fd62, [%rd26];
	add.f64 	%fd63, %fd45, %fd62;
	sub.f64 	%fd64, %fd63, %fd46;
	add.f64 	%fd65, %fd46, %fd63;
	add.f64 	%fd66, %fd63, %fd63;
	add.s64 	%rd28, %rd27, %rd25;
	ld.global.f64 	%fd67, [%rd28];
	add.f64 	%fd68, %fd47, %fd67;
	sub.f64 	%fd69, %fd68, %fd48;
	add.f64 	%fd70, %fd48, %fd68;
	mul.f64 	%fd71, %fd69, %fd70;
	add.f64 	%fd72, %fd68, %fd68;
	mul.f64 	%fd73, %fd48, %fd72;
	fma.rn.f64 	%fd74, %fd64, %fd65, %fd71;
	fma.rn.f64 	%fd75, %fd46, %fd66, %fd73;
	add.s64 	%rd30, %rd29, %rd25;
	ld.global.f64 	%fd76, [%rd30];
	add.f64 	%fd77, %fd49, %fd76;
	sub.f64 	%fd78, %fd77, %fd50;
	add.f64 	%fd79, %fd50, %fd77;
	add.f64 	%fd80, %fd77, %fd77;
	fma.rn.f64 	%fd81, %fd78, %fd79, %fd74;
	fma.rn.f64 	%fd13, %fd50, %fd80, %fd75;
	abs.f64 	%fd82, %fd81;
	abs.f64 	%fd83, %fd13;
	mov.b64 	 %rd31, %fd83;
	mov.b64 	 %rd32, %fd82;
	min.u64 	%rd33, %rd31, %rd32;
	mov.b64 	 %fd84, %rd33;
	max.u64 	%rd34, %rd32, %rd31;
	mov.b64 	 %fd85, %rd34;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r43}, %fd85;
	}
	and.b32  	%r44, %r43, -4194304;
	mov.u32 	%r45, 2144337920;
	sub.s32 	%r46, %r45, %r44;
	mov.b64 	%fd86, {%r89, %r46};
	mul.f64 	%fd87, %fd84, %fd86;
	mul.f64 	%fd88, %fd85, %fd86;
	mul.f64 	%fd89, %fd87, %fd87;
	fma.rn.f64 	%fd90, %fd88, %fd88, %fd89;
	mov.f64 	%fd91, 0d7FEFFFFFFFFFFFFF;
	min.f64 	%fd59, %fd90, %fd91;
	// inline asm
	rsqrt.approx.ftz.f64 %fd58, %fd59;
	// inline asm
	mul.rn.f64 	%fd92, %fd58, %fd58;
	neg.f64 	%fd93, %fd92;
	mov.f64 	%fd94, 0d3FF0000000000000;
	fma.rn.f64 	%fd95, %fd59, %fd93, %fd94;
	mov.f64 	%fd96, 0d3FE0000000000000;
	mov.f64 	%fd97, 0d3FD8000000000000;
	fma.rn.f64 	%fd98, %fd97, %fd95, %fd96;
	mul.rn.f64 	%fd99, %fd95, %fd58;
	fma.rn.f64 	%fd100, %fd98, %fd99, %fd58;
	mul.f64 	%fd101, %fd90, %fd100;
	add.s32 	%r47, %r44, 1048576;
	mov.b64 	%fd102, {%r89, %r47};
	mul.f64 	%fd103, %fd101, %fd102;
	setp.eq.f64	%p9, %fd84, 0d0000000000000000;
	selp.f64	%fd104, %fd85, %fd103, %p9;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r48}, %fd84;
	}
	setp.lt.u32	%p10, %r48, %r3;
	selp.f64	%fd105, %fd104, %fd84, %p10;
	sqrt.rn.f64 	%fd14, %fd105;
	add.f64 	%fd15, %fd81, %fd105;
	abs.f64 	%fd106, %fd15;
	mov.b64 	 %rd35, %fd106;
	min.u64 	%rd36, %rd31, %rd35;
	mov.b64 	 %fd16, %rd36;
	max.u64 	%rd37, %rd35, %rd31;
	mov.b64 	 %fd17, %rd37;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r49}, %fd17;
	}
	and.b32  	%r50, %r49, -4194304;
	sub.s32 	%r51, %r45, %r50;
	mov.b64 	%fd107, {%r89, %r51};
	mul.f64 	%fd108, %fd16, %fd107;
	mul.f64 	%fd109, %fd17, %fd107;
	mul.f64 	%fd110, %fd108, %fd108;
	fma.rn.f64 	%fd61, %fd109, %fd109, %fd110;
	// inline asm
	rsqrt.approx.ftz.f64 %fd60, %fd61;
	// inline asm
	mul.rn.f64 	%fd111, %fd60, %fd60;
	neg.f64 	%fd112, %fd111;
	fma.rn.f64 	%fd113, %fd61, %fd112, %fd94;
	fma.rn.f64 	%fd114, %fd97, %fd113, %fd96;
	mul.rn.f64 	%fd115, %fd113, %fd60;
	fma.rn.f64 	%fd116, %fd114, %fd115, %fd60;
	mul.f64 	%fd229, %fd107, %fd116;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r52}, %fd229;
	}
	setp.lt.u32	%p11, %r52, %r3;
	@%p11 bra 	BB0_8;

	abs.f64 	%fd117, %fd17;
	setp.gtu.f64	%p12, %fd117, 0d7FF0000000000000;
	@%p12 bra 	BB0_6;
	bra.uni 	BB0_5;

BB0_6:
	add.f64 	%fd228, %fd16, %fd17;
	bra.uni 	BB0_7;

BB0_5:
	setp.neu.f64	%p13, %fd17, 0d7FF0000000000000;
	selp.b32	%r53, %r3, 0, %p13;
	mov.u32 	%r54, 0;
	mov.b64 	%fd228, {%r54, %r53};

BB0_7:
	setp.eq.f64	%p14, %fd16, 0d7FF0000000000000;
	selp.f64	%fd229, 0d0000000000000000, %fd228, %p14;

BB0_8:
	mov.f64 	%fd226, 0d3FF0000000000000;
	mul.f64 	%fd118, %fd14, %fd229;
	mul.f64 	%fd24, %fd15, %fd118;
	mul.f64 	%fd25, %fd13, %fd118;
	mov.u64 	%rd39, lMixtureAlpha;
	add.s64 	%rd40, %rd39, %rd25;
	ld.const.f64 	%fd26, [%rd40];
	add.s64 	%rd42, %rd41, %rd25;
	ld.global.f64 	%fd119, [%rd42];
	add.f64 	%fd120, %fd51, %fd119;
	add.f64 	%fd27, %fd120, %fd24;
	mov.f64 	%fd121, 0d4338000000000000;
	mov.f64 	%fd122, 0d3FF71547652B82FE;
	fma.rn.f64 	%fd123, %fd27, %fd122, %fd121;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r5, %temp}, %fd123;
	}
	mov.f64 	%fd124, 0dC338000000000000;
	add.rn.f64 	%fd125, %fd123, %fd124;
	mov.f64 	%fd126, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd127, %fd125, %fd126, %fd27;
	mov.f64 	%fd128, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd129, %fd125, %fd128, %fd127;
	mov.f64 	%fd130, 0d3E928AF3FCA213EA;
	mov.f64 	%fd131, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd132, %fd131, %fd129, %fd130;
	mov.f64 	%fd133, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd134, %fd132, %fd129, %fd133;
	mov.f64 	%fd135, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd136, %fd134, %fd129, %fd135;
	mov.f64 	%fd137, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd138, %fd136, %fd129, %fd137;
	mov.f64 	%fd139, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd140, %fd138, %fd129, %fd139;
	mov.f64 	%fd141, 0d3F81111111122322;
	fma.rn.f64 	%fd142, %fd140, %fd129, %fd141;
	mov.f64 	%fd143, 0d3FA55555555502A1;
	fma.rn.f64 	%fd144, %fd142, %fd129, %fd143;
	mov.f64 	%fd145, 0d3FC5555555555511;
	fma.rn.f64 	%fd146, %fd144, %fd129, %fd145;
	mov.f64 	%fd147, 0d3FE000000000000B;
	fma.rn.f64 	%fd148, %fd146, %fd129, %fd147;
	fma.rn.f64 	%fd150, %fd148, %fd129, %fd226;
	fma.rn.f64 	%fd151, %fd150, %fd129, %fd226;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r6, %temp}, %fd151;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r7}, %fd151;
	}
	shl.b32 	%r55, %r5, 20;
	add.s32 	%r56, %r7, %r55;
	mov.b64 	%fd230, {%r6, %r56};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r57}, %fd27;
	}
	mov.b32 	 %f2, %r57;
	abs.f32 	%f1, %f2;
	setp.lt.f32	%p15, %f1, 0f4086232B;
	@%p15 bra 	BB0_11;

	setp.lt.f64	%p16, %fd27, 0d0000000000000000;
	add.f64 	%fd152, %fd27, 0d7FF0000000000000;
	selp.f64	%fd230, 0d0000000000000000, %fd152, %p16;
	setp.geu.f32	%p17, %f1, 0f40874800;
	@%p17 bra 	BB0_11;

	shr.u32 	%r58, %r5, 31;
	add.s32 	%r59, %r5, %r58;
	shr.s32 	%r60, %r59, 1;
	shl.b32 	%r61, %r60, 20;
	add.s32 	%r62, %r61, %r7;
	mov.b64 	%fd153, {%r6, %r62};
	sub.s32 	%r63, %r5, %r60;
	shl.b32 	%r64, %r63, 20;
	add.s32 	%r65, %r64, 1072693248;
	mov.u32 	%r66, 0;
	mov.b64 	%fd154, {%r66, %r65};
	mul.f64 	%fd230, %fd153, %fd154;

BB0_11:
	add.f64 	%fd231, %fd52, %fd25;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r67}, %fd231;
	}
	and.b32  	%r68, %r67, 2147483647;
	setp.ne.s32	%p18, %r68, 2146435072;
	@%p18 bra 	BB0_14;

	add.f64 	%fd231, %fd52, %fd25;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r69, %temp}, %fd231;
	}
	setp.ne.s32	%p19, %r69, 0;
	@%p19 bra 	BB0_14;

	add.f64 	%fd155, %fd52, %fd25;
	mov.f64 	%fd156, 0d0000000000000000;
	mul.rn.f64 	%fd231, %fd155, %fd156;

BB0_14:
	mul.f64 	%fd157, %fd231, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r91, %fd157;
	add.u64 	%rd43, %SP, 0;
	add.u64 	%rd44, %SPL, 0;
	st.local.u32 	[%rd44], %r91;
	cvt.rn.f64.s32	%fd158, %r91;
	neg.f64 	%fd159, %fd158;
	mov.f64 	%fd160, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd161, %fd159, %fd160, %fd231;
	mov.f64 	%fd162, 0d3C91A62633145C00;
	fma.rn.f64 	%fd163, %fd159, %fd162, %fd161;
	mov.f64 	%fd164, 0d397B839A252049C0;
	fma.rn.f64 	%fd232, %fd159, %fd164, %fd163;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r70}, %fd231;
	}
	and.b32  	%r71, %r70, 2145386496;
	setp.lt.u32	%p20, %r71, 1105199104;
	@%p20 bra 	BB0_16;

	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd231;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd43;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd232, [retval0+0];
	
	//{
	}// Callseq End 0
	ld.local.u32 	%r91, [%rd44];

BB0_16:
	mov.f64 	%fd227, 0d3FF0000000000000;
	mul.rn.f64 	%fd165, %fd232, %fd232;
	mov.f64 	%fd166, 0d3E21EEA7C1EF8528;
	mov.f64 	%fd167, 0dBDA8FF8320FD8164;
	fma.rn.f64 	%fd168, %fd167, %fd165, %fd166;
	mov.f64 	%fd169, 0dBE927E4F8E06E6D9;
	fma.rn.f64 	%fd170, %fd168, %fd165, %fd169;
	mov.f64 	%fd171, 0d3EFA01A019DDBCE9;
	fma.rn.f64 	%fd172, %fd170, %fd165, %fd171;
	mov.f64 	%fd173, 0dBF56C16C16C15D47;
	fma.rn.f64 	%fd174, %fd172, %fd165, %fd173;
	mov.f64 	%fd175, 0d3FA5555555555551;
	fma.rn.f64 	%fd176, %fd174, %fd165, %fd175;
	mov.f64 	%fd177, 0dBFE0000000000000;
	fma.rn.f64 	%fd178, %fd176, %fd165, %fd177;
	fma.rn.f64 	%fd180, %fd178, %fd165, %fd227;
	mov.f64 	%fd181, 0dBE5AE5F12CB0D246;
	mov.f64 	%fd182, 0d3DE5DB65F9785EBA;
	fma.rn.f64 	%fd183, %fd182, %fd165, %fd181;
	mov.f64 	%fd184, 0d3EC71DE369ACE392;
	fma.rn.f64 	%fd185, %fd183, %fd165, %fd184;
	mov.f64 	%fd186, 0dBF2A01A019DB62A1;
	fma.rn.f64 	%fd187, %fd185, %fd165, %fd186;
	mov.f64 	%fd188, 0d3F81111111110818;
	fma.rn.f64 	%fd189, %fd187, %fd165, %fd188;
	mov.f64 	%fd190, 0dBFC5555555555554;
	fma.rn.f64 	%fd191, %fd189, %fd165, %fd190;
	mov.f64 	%fd192, 0d0000000000000000;
	fma.rn.f64 	%fd193, %fd191, %fd165, %fd192;
	fma.rn.f64 	%fd194, %fd193, %fd232, %fd232;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r72}, %fd194;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r73, %temp}, %fd194;
	}
	xor.b32  	%r74, %r72, -2147483648;
	mov.b64 	%fd195, {%r73, %r74};
	and.b32  	%r75, %r91, 1;
	setp.eq.b32	%p21, %r75, 1;
	not.pred 	%p22, %p21;
	selp.f64	%fd233, %fd194, %fd180, %p22;
	selp.f64	%fd234, %fd180, %fd195, %p22;
	and.b32  	%r76, %r91, 2;
	setp.eq.s32	%p23, %r76, 0;
	@%p23 bra 	BB0_18;

	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r77}, %fd233;
	}
	xor.b32  	%r78, %r77, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r79, %temp}, %fd233;
	}
	mov.b64 	%fd233, {%r79, %r78};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r80}, %fd234;
	}
	xor.b32  	%r81, %r80, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r82, %temp}, %fd234;
	}
	mov.b64 	%fd234, {%r82, %r81};

BB0_18:
	cvt.s64.s32	%rd50, %r90;
	ld.const.u32 	%r88, [mixturesNum];
	mul.f64 	%fd196, %fd26, %fd56;
	mul.f64 	%fd197, %fd26, %fd57;
	mul.f64 	%fd198, %fd230, %fd233;
	mul.f64 	%fd199, %fd54, %fd198;
	neg.f64 	%fd200, %fd199;
	mul.f64 	%fd201, %fd230, %fd234;
	fma.rn.f64 	%fd202, %fd53, %fd201, %fd200;
	mul.f64 	%fd203, %fd54, %fd201;
	fma.rn.f64 	%fd204, %fd53, %fd198, %fd203;
	mul.f64 	%fd205, %fd25, %fd25;
	fma.rn.f64 	%fd206, %fd24, %fd24, %fd205;
	rcp.rn.f64 	%fd207, %fd206;
	mul.f64 	%fd208, %fd25, %fd204;
	fma.rn.f64 	%fd209, %fd202, %fd24, %fd208;
	mul.f64 	%fd210, %fd207, %fd209;
	mul.f64 	%fd211, %fd25, %fd202;
	neg.f64 	%fd212, %fd211;
	fma.rn.f64 	%fd213, %fd204, %fd24, %fd212;
	mul.f64 	%fd214, %fd207, %fd213;
	mul.f64 	%fd215, %fd197, %fd214;
	neg.f64 	%fd216, %fd215;
	fma.rn.f64 	%fd217, %fd196, %fd210, %fd216;
	mul.f64 	%fd218, %fd197, %fd210;
	fma.rn.f64 	%fd219, %fd196, %fd214, %fd218;
	mul.wide.s32 	%rd48, %r1, 16;
	add.s64 	%rd49, %rd47, %rd48;
	ld.global.v2.f64 	{%fd220, %fd221}, [%rd49];
	add.f64 	%fd224, %fd219, %fd221;
	add.f64 	%fd225, %fd217, %fd220;
	st.global.v2.f64 	[%rd49], {%fd225, %fd224};
	cvt.u32.u64	%r87, %rd50;
	add.s32 	%r90, %r87, 1;
	setp.lt.s32	%p24, %r90, %r88;
	@%p24 bra 	BB0_3;

BB0_19:
	ret;
}

.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<101>;


	mov.u64 	%SPL, __local_depot1;
	ld.param.f64 	%fd4, [__internal_trig_reduction_slowpathd_param_0];
	ld.param.u64 	%rd37, [__internal_trig_reduction_slowpathd_param_1];
	add.u64 	%rd1, %SPL, 0;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd4;
	}
	and.b32  	%r40, %r1, -2147483648;
	shr.u32 	%r3, %r1, 20;
	bfe.u32 	%r4, %r1, 20, 11;
	setp.eq.s32	%p1, %r4, 2047;
	@%p1 bra 	BB1_13;

	add.s32 	%r15, %r4, -1024;
	shr.u32 	%r16, %r15, 6;
	mov.u32 	%r17, 15;
	sub.s32 	%r5, %r17, %r16;
	mov.u32 	%r18, 19;
	sub.s32 	%r19, %r18, %r16;
	mov.u32 	%r20, 18;
	min.s32 	%r6, %r20, %r19;
	mov.u64 	%rd94, 0;
	setp.ge.s32	%p2, %r5, %r6;
	mov.u64 	%rd93, %rd1;
	@%p2 bra 	BB1_4;

	bfe.u32 	%r21, %r1, 20, 11;
	add.s32 	%r22, %r21, -1024;
	shr.u32 	%r23, %r22, 6;
	sub.s32 	%r25, %r17, %r23;
	mul.wide.s32 	%rd41, %r25, 8;
	mov.u64 	%rd42, __cudart_i2opi_d;
	add.s64 	%rd89, %rd42, %rd41;
	mov.b64 	 %rd43, %fd4;
	shl.b64 	%rd44, %rd43, 11;
	or.b64  	%rd5, %rd44, -9223372036854775808;
	mov.u64 	%rd94, 0;
	mov.u64 	%rd93, %rd1;
	mov.u64 	%rd91, %rd1;
	mov.u32 	%r39, %r5;

BB1_3:
	.pragma "nounroll";
	ld.const.u64 	%rd47, [%rd89];
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi, clo, chi;
	mov.b64         {alo,ahi}, %rd47;    
	mov.b64         {blo,bhi}, %rd5;    
	mov.b64         {clo,chi}, %rd94;    
	mad.lo.cc.u32   r0, alo, blo, clo;
	madc.hi.cc.u32  r1, alo, blo, chi;
	madc.hi.u32     r2, alo, bhi,   0;
	mad.lo.cc.u32   r1, alo, bhi,  r1;
	madc.hi.cc.u32  r2, ahi, blo,  r2;
	madc.hi.u32     r3, ahi, bhi,   0;
	mad.lo.cc.u32   r1, ahi, blo,  r1;
	madc.lo.cc.u32  r2, ahi, bhi,  r2;
	addc.u32        r3,  r3,   0;     
	mov.b64         %rd45, {r0,r1};      
	mov.b64         %rd94, {r2,r3};      
	}
	// inline asm
	st.local.u64 	[%rd91], %rd45;
	add.s32 	%r39, %r39, 1;
	sub.s32 	%r26, %r39, %r5;
	mul.wide.s32 	%rd50, %r26, 8;
	add.s64 	%rd91, %rd1, %rd50;
	add.s64 	%rd93, %rd93, 8;
	add.s64 	%rd89, %rd89, 8;
	setp.lt.s32	%p3, %r39, %r6;
	@%p3 bra 	BB1_3;

BB1_4:
	st.local.u64 	[%rd93], %rd94;
	ld.local.u64 	%rd95, [%rd1+16];
	ld.local.u64 	%rd96, [%rd1+24];
	and.b32  	%r9, %r3, 63;
	setp.eq.s32	%p4, %r9, 0;
	@%p4 bra 	BB1_6;

	mov.u32 	%r27, 64;
	sub.s32 	%r28, %r27, %r9;
	shl.b64 	%rd51, %rd96, %r9;
	shr.u64 	%rd52, %rd95, %r28;
	or.b64  	%rd96, %rd51, %rd52;
	shl.b64 	%rd53, %rd95, %r9;
	ld.local.u64 	%rd54, [%rd1+8];
	shr.u64 	%rd55, %rd54, %r28;
	or.b64  	%rd95, %rd55, %rd53;

BB1_6:
	shr.u64 	%rd56, %rd96, 62;
	cvt.u32.u64	%r29, %rd56;
	shr.u64 	%rd57, %rd95, 62;
	shl.b64 	%rd58, %rd96, 2;
	or.b64  	%rd98, %rd58, %rd57;
	shl.b64 	%rd97, %rd95, 2;
	shr.u64 	%rd59, %rd96, 61;
	cvt.u32.u64	%r30, %rd59;
	and.b32  	%r31, %r30, 1;
	add.s32 	%r32, %r31, %r29;
	neg.s32 	%r33, %r32;
	setp.eq.s32	%p5, %r40, 0;
	selp.b32	%r34, %r32, %r33, %p5;
	cvta.to.local.u64 	%rd60, %rd37;
	st.local.u32 	[%rd60], %r34;
	setp.eq.s32	%p6, %r31, 0;
	@%p6 bra 	BB1_8;

	mov.u64 	%rd64, 0;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd64;
	mov.b64         {a2,a3}, %rd64;
	mov.b64         {b0,b1}, %rd97;
	mov.b64         {b2,b3}, %rd98;
	sub.cc.u32      r0, a0, b0; 
	subc.cc.u32     r1, a1, b1; 
	subc.cc.u32     r2, a2, b2; 
	subc.u32        r3, a3, b3; 
	mov.b64         %rd97, {r0,r1};
	mov.b64         %rd98, {r2,r3};
	}
	// inline asm
	xor.b32  	%r40, %r40, -2147483648;

BB1_8:
	clz.b64 	%r41, %rd98;
	setp.eq.s32	%p7, %r41, 0;
	@%p7 bra 	BB1_10;

	shl.b64 	%rd67, %rd98, %r41;
	mov.u32 	%r35, 64;
	sub.s32 	%r36, %r35, %r41;
	shr.u64 	%rd68, %rd97, %r36;
	or.b64  	%rd98, %rd68, %rd67;

BB1_10:
	mov.u64 	%rd72, -3958705157555305931;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi;
	mov.b64         {alo,ahi}, %rd98;   
	mov.b64         {blo,bhi}, %rd72;   
	mul.lo.u32      r0, alo, blo;    
	mul.hi.u32      r1, alo, blo;    
	mad.lo.cc.u32   r1, alo, bhi, r1;
	madc.hi.u32     r2, alo, bhi,  0;
	mad.lo.cc.u32   r1, ahi, blo, r1;
	madc.hi.cc.u32  r2, ahi, blo, r2;
	madc.hi.u32     r3, ahi, bhi,  0;
	mad.lo.cc.u32   r2, ahi, bhi, r2;
	addc.u32        r3, r3,  0;      
	mov.b64         %rd69, {r0,r1};     
	mov.b64         %rd100, {r2,r3};     
	}
	// inline asm
	setp.lt.s64	%p8, %rd100, 1;
	@%p8 bra 	BB1_12;

	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd69;
	mov.b64         {a2,a3}, %rd100;
	mov.b64         {b0,b1}, %rd69;
	mov.b64         {b2,b3}, %rd100;
	add.cc.u32      r0, a0, b0; 
	addc.cc.u32     r1, a1, b1; 
	addc.cc.u32     r2, a2, b2; 
	addc.u32        r3, a3, b3; 
	mov.b64         %rd73, {r0,r1};
	mov.b64         %rd100, {r2,r3};
	}
	// inline asm
	add.s32 	%r41, %r41, 1;

BB1_12:
	cvt.u64.u32	%rd79, %r40;
	shl.b64 	%rd80, %rd79, 32;
	mov.u32 	%r37, 1022;
	sub.s32 	%r38, %r37, %r41;
	cvt.u64.u32	%rd81, %r38;
	shl.b64 	%rd82, %rd81, 52;
	add.s64 	%rd83, %rd100, 1;
	shr.u64 	%rd84, %rd83, 10;
	add.s64 	%rd85, %rd84, 1;
	shr.u64 	%rd86, %rd85, 1;
	add.s64 	%rd87, %rd86, %rd82;
	or.b64  	%rd88, %rd87, %rd80;
	mov.b64 	 %fd4, %rd88;

BB1_13:
	st.param.f64	[func_retval0+0], %fd4;
	ret;
}


